// Generated by AMRAAM on {timestamp}

// GLOBAL SETTINGS

// The name of the server that shall be displayed in the public server list
hostname = "{config.hostname}";
// Password for joining, eg connecting to the server
password = "{config.password}";
// Password to become server admin. When you're in Arma MP and connected to the
// server, type '#login {config.password_admin}'
passwordAdmin = "{config.password_admin}";

// Tells ArmA-server where the logfile should go and what it should be called
logFile = "{config.log_file}";

// WELCOME MESSAGE ("message of the day")
motd[] = \{
{{ for line in config.motd }}    "{line}"{{ if not @last }},{{ endif }}
{{ endfor }}};
// Time interval (in seconds) between each message
motdInterval = {config.motd_interval};

// whitelisted client can use #login w/o password (since Arma 3 1.69+). See
// Logged In Admin
admins[] = \{{{ for admin in config.admins }}"{admin}"{{ if not @last }}, {{ endif }}{{ endfor }}};

// Limit for maximum Steam Query packet length. (since Arma 3 1.99+)
// Increasing this value is dangerous as it can cause Arma server to send UDP
// packets of a size larger than the MTU. This will cause UDP packets to be
// fragmented which is not supported by some older routers. But increasing this
// will fix the modlist length limit in Arma 3 Launcher.
steamProtocolMaxDataSize = {config.steam_protocol_max_data_size};

// default 1, allows to opt-out of analytics for the server by using 0
statisticsEnabled = {config.statistics_enabled}


// JOINING RULES
//
// Maximum amount of players. Civilians and watchers, beholder, bystanders and
// so on also count as player.
maxPlayers = {config.max_players};
// Each ArmA version has its own ID. If kickDuplicate is set to 1, a player
// will be kicked when he joins a server where another player with the same ID
// is playing.
kickDuplicate = {config.kick_duplicate};
// Verifies .pbos against .bisign files. Valid values 0 (disabled), 1 (prefer
// v2 sigs but accept v1 too) and 2 (only v2 sigs are allowed).
verifySignatures = {config.verify_signatures};
// Allow or prevent client using -filePatching to join the server. 0, is
// disallow, 1 is allow HC, 2 is allow all clients (since Arma 3 1.49+)
allowedFilePatching = {config.allowed_file_patching};
// Whitelisted Steam IDs allowed to join with -filePatching enabled
{{- if config.file_patching_exceptions }}
filePatchingExceptions[] = \{
{{ for id in config.file_patching_exceptions }}    "{id}"{{ if not @last }},{{ endif }}
{{ endfor }}};
{{ else }}
filePatchingExceptions[] = \{};
{{- endif }}
{{ if not config.required_build -}}
// Require clients joining to have at least build 12345 of game, preventing
// obsolete clients to connect
requiredBuild = {config.required_build};
{{- endif }}

// VOTING

// Tells the server how many people must connect so that it displays the
// mission selection screen.
voteMissionPlayers = {config.vote_mission_players};
// 33% or more players need to vote for something, for example an admin or a
// new map, to become effective
voteThreshold = {config.vote_threshold};


// INGAME SETTINGS

// If set to 1, Voice over Net will not be available
disableVoN = {config.disable_von};
// If set to 1 then it uses IETF standard OPUS codec, if to 0 then it uses
// SPEEX codec (since Arma 3 update 1.58+)
vonCodec = {config.von_codec};
// since 1.62.95417 supports range 1-20
// since 1.63.x will supports range 1-30
// 8kHz is 0-10, 16kHz is 11-20, 32kHz(48kHz) is 21-30
vonCodecQuality = {config.von_codec_quality};
// If 1, missions still run on even after the last player disconnected.
persistent = {config.persistent};
// Set the timestamp format used on each report line in server-side RPT file.
// Possible values are "none" (default),"short","full".
timeStampFormat = "{config.timestamp_format}";
// Server to use BattlEye system
BattlEye = {config.battleye};
//only allow files with those extensions to be loaded via loadFile command
//(since Arma 3 build 1.19.124216)
allowedLoadFileExtensions[] = \{{{ for ext in config.allowed_load_file_extensions }}"{ext}"{{ if not @last }}, {{ endif }}{{ endfor }}};
//only allow files with those extensions to be loaded via
//preprocessFile/preprocessFileLineNumber commands (since Arma 3 build
//1.19.124323)
allowedPreprocessFileExtensions[] = \{{{ for ext in config.allowed_preprocess_file_extensions }}"{ext}"{{ if not @last }}, {{ endif }}{{ endfor }}};
//only allow files with those extensions to be loaded via HTMLLoad command
//(since Arma 3 build 1.27.126715)
allowedHTMLLoadExtensions[] = \{{{ for ext in config.allowed_html_load_extensions }}"{ext}"{{ if not @last }}, {{ endif }}{{ endfor }}};
// Leave commented to let missions/campaigns/addons decide what URIs are
// supported. Uncomment to define server-level restrictions for URIs
//allowedHTMLLoadURIs[] = \{};

// Enforces the Advanced Flight Model on the server. Default = 0 (up to the
// player). 1 - forced AFM, 2 - forced SFM.
forceRotorLibSimulation = {config.force_rotor_lib_simulation};

forcedDifficulty = "{config.forced_difficulty}"

// TIMEOUTS

// Time to wait before disconnecting a user which temporarly lost connection.
// Range is 5 to 90 seconds.
disconnectTimeout = {config.disconnect_timeout};
// Max desync value until server kick the user
maxDesync = {config.max_desync};
// Max ping value until server kick the user
maxPing = {config.max_ping};
// Max packetloss value until server kick the user
maxPacketLoss = {config.max_packet_loss};
// Defines if \{<MaxPing>, <MaxPacketLoss>, <MaxDesync>, <DisconnectTimeout>}
// will be logged (0) or kicked (1)
kickClientsOnSlowNetwork[] = \{{config.kick_clients_on_slow_network.max_ping}, {config.kick_clients_on_slow_network.max_packet_loss}, {config.kick_clients_on_slow_network.max_desync}, {config.kick_clients_on_slow_network.disconnect_timeout}};
kickTimeout[] = \{{{for def in config.kick_timeout}}\{{def.type}, {def.timeout}}{{ if not @last }}, {{ endif }}{{ endfor }}};
// Kicks users from server if they spend too much time in mission voting
votingTimeOut[] = \{{config.voting_timeout.ready}, {config.voting_timeout.not_ready}};
// Kicks users from server if they spend too much time in role selection
roleTimeOut[] = \{{config.role_timeout.ready}, {config.role_timeout.not_ready}};
// Kicks users from server if they spend too much time in briefing (map) screen
briefingTimeOut[] = \{{config.briefing_timeout.ready}, {config.briefing_timeout.not_ready}};
// Kicks users from server if they spend too much time in debriefing screen
debriefingTimeOut[] = \{{config.debriefing_timeout.ready}, {config.debriefing_timeout.not_ready}};
// The amount of time the server will wait before force-starting a mission without a logged-in Admin.
lobbyIdleTimeout = {config.lobby_idle_timeout};


// SCRIPTING ISSUES
onUserConnected = "";
onUserDisconnected = "";
doubleIdDetected = "";

// SIGNATURE VERIFICATION

// unsigned data detected
onUnsignedData = "kick (_this select 0)";
// tampering of the signature detected
onHackedData = "kick (_this select 0)";
// data with a valid signature, but different version than the one present on
// server detected
onDifferentData = "";


// MISSIONS CYCLE (see below)

// Randomly iterate through Missions list
randomMissionOrder = true;
// Server auto selects next mission in cycle
autoSelectMission = true;

// An empty Missions class means there will be no mission rotation
class Missions \{};

// Limit the available missions for the admin for the mission change (since Arma 3 1.56+)
// An empty whitelist means there is no restriction on what missions are available
{{ if config.mission_whitelist -}}
missionWhitelist[] = \{
{{ for id in config.mission_whitelist }}    "{id}"{{ if not @last }},{{ endif }}
{{ endfor }}};
{{ else }}
missionWhitelist[] = \{};
{{- endif }}
